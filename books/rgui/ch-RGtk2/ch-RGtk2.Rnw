\SweaveOpts{keep.source=TRUE}
% XXX- discuss GtkBin; which widgets have a window, which do not --image and label do not, and we might want them too,
%   modify_bg() only affects widgets that have an associated gtk.gdk.Window.
% > Widgets that do not have an associated window include .... gtk.Arrow,
% > gtk.Bin, gtk.Box, gtk.Button, gtk.CheckButton, gtk.Fixed , gtk.Image ,
% > gtk.Label , gtk.MenuItem , gtk.Notebook , gtk.Paned , gtk.RadioButton ,
% > gtk.Range , gtk.ScrolledWindow , gtk.Separator , gtk.Table , gtk.Toolbar ,
% > gtk.AspectFrame , gtk.Frame , gtk.VBox , gtk.HBox , gtk.VSeparator ,
% > gtk.HSeparator . These widgets can be added to a gtk.EventBox to overcome
% > this limitation.


<<echo=FALSE>>=
options(prompt=" ")
options(continue=" ")
options(width=60)

findmethod <- function (obj, name, where=.GlobalEnv) 
{
    classes <- c(attr(obj, "interfaces"), class(obj))
    sym <- paste(tolower(substring(classes, 1, 1)), substring(classes, 
        2), toupper(substring(name, 1, 1)), substring(name, 2), 
        sep = "")
    which <- sapply(sym, exists, where)
    if (!any(which)) 
        stop(paste("No such method", name, "for classes", paste(class(obj), 
            collapse = ", ")))
    return(sym[which][1])
}

## override NULL in output
args <- function(name) {
  body(name) <- NULL
  environment(name) <- .GlobalEnv
  name
  ## out <- capture.output(base::args(name))
  ## invisible(cat(out[-length(out)], "\n"))
}
@ 


%% RGtk2 chapter
\chapter{RGtk2: Overview}
%%\section{Introduction}
\label{sec:RGtk2-Introduction}
\SweaveInput{Introduction}

\chapter{RGtk2: Windows, Containers, and Dialogs}
\label{sec:top-level-windows}
\SweaveInput{Containers}

\chapter{RGtk2: Basic Components}
\label{sec:basic-components}
\SweaveInput{BasicComponents}

\chapter{RGtk2: Widgets Using Data Models}
\label{sec:RGtk2:widgets-with-models}
\SweaveInput{WidgetsWithModels}


\chapter{RGtk2: Application Windows}
\label{sec:RGtk2-menus}
\SweaveInput{menus}

%% TODO: this needs to go somewhere.. appendix?
%% JV, I guess here

\chapter{Extending GObject Classes}
\label{chapter:extending-GTK}
\SweaveInput{Classes}


% \label{sec:RGtk2:dialogs}
% \SweaveInput{Pre-defined-dialogs}

% \chapter{\code{cairoDevice}}
% \label{sec:RGtk2-cairoDevice}
% \SweaveInput{cairoDevice}

% \chapter{Using \code{glade} to design GUIs}
% \label{sec:RGtk2-glade}
% \SweaveInput{Glade}

%\section{End of chapter notes}
%\label{sec:RGtk2:end-of-chapter}

% * overview in inst
% * gtk tutorial in R
% * API at http://developer.gimp.org/api/2.0/gtk/
% * ...

% * widget gallery
% https://developer-old.gnome.org/gtk2/stable/ch02.html

%  good source: http://developer-old.gnome.org/doc/GGAD/ggad.html

% * http://gtk.org/documentation.html

% * gtk API
% https://developer-old.gnome.org/gtk2/stable/

% * pango manual 
% https://developer-old.gnome.org/pango/stable/PangoMarkupFormat.html

% * Missing discussion on standard dialogs: message, confirmations, etc.
% filebrowser, colors selector, font selector, 

% * Mention history: GIMP; GNOME; DTL RGtk; Michael Lawrence RGtk2
% * Installation: windows; linux; mac OS X

% * Info
% php cookbook good source of info

% DTL examples from omegahat

% pygtk tutorial easier to read than C one (no types specifed)
% pygtk cookbook: http://eccentric.cx/misc/pygtk/wiki/doku.php?id=pygtk
% pygtk faq: http://faq.pygtk.org/index.py?req=index


%% Need a comparison of RGtk2 and qtbase, somewhere (appendix? qt chapter?)

%% High-level comparison of frameworks:

%% Feature     Qt            GTK+           R
%% ------------------------------------------------------------------------
%% DBus        QtDBus        GDBus (GIO)    None (RCorba is Windows Equivalent)
%% XML UI      QtUiTools     GtkBuilder     RGG (Java)  
%% GUI         QtGui         GTK+           tcltk
%% Help        QtHelp        Yelp (Gnome)   R help system (primitive)   
%% Multimedia  QtMultimedia  GStreamer      None
%% IO/Network  QtNetwork     GIO            R connections (synchronous only)
%% OpenGL      QtOpenGL      GlExt/Cairo    rgl
%% Javascript  QtScript      None           None
%% SQL         QtSql         libgda         DBI (good enough)
%% SVG         QtSvg         cairo/librsvg  cairoDevice, svgImport, etc
%% Web browser QtWebkit      GtkWebkit      None     
%% XML         QtXml         libxml         XML (binds libxml)
%% Settings    QtNetwork     GIO            Nothing really

%% Notes:
%% - DBus is likely useless, except on Linux
%% - Deepayan's qtutils package integrates R docs with QtHelp
%% - Multimedia could be useful for generating videos, etc (out of scope)
%% - R connections are very primitive (no asynchronous I/O)
%% - Qt provides 2D API for OpenGL
%% - DBI package covers database access needs
%% - SVG not designed for interactivity, <canvas> better
%% - GtkWebkit should be bound in separate package (worth it?)
%% - XML package has XML handling covered
%% - The graphics support in QtGui is a major advantage over
%%   Cairo-based GTK+. The QPainter API is better designed for stat
%%   graphics and has faster backend implementations. QGraphicsView is
%%   a mature canvas, something GTK+ lacks.

%% Summary: 
%% - Useful features in qtbase, but not RGtk2: WebKit, Multimedia
%%   - GtkWebkit, GStreamer could be bound, but not worth it, given qtbase
%%   - QtWebkit offers Javascript <-> Qt bridge via QtScript

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<<echo=FALSE>>=
options(prompt="> ")
options(continue="+ ")
options(width=80)
@ 


